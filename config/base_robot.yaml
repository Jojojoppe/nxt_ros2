# Define ports (1-4 or A, B or C), device types and node/topic names
/nxt_ros_setup:
  ros__parameters:
    devices:
      1:
        sensor_type: touch
        sensor_name: touch_sensor
      3:
        sensor_type: reflected_light
        sensor_name: reflected_light_sensor
      4:
        sensor_type: ultrasonic
        sensor_name: ultrasonic_sensor
        frame_id: radar_link # optional: adds frame_id to message.header
      A:
        motor_type: other
        motor_name: radar_motor
        motor_mimic_name: radar
        motor_mimic_gear_ratio: -0.33333
        invert_direction: false
      B:
        motor_type: wheel_motor_l
        motor_name: wheel_motor_l
        motor_mimic_name: wheel_l
        motor_mimic_gear_ratio: -0.33333
        invert_direction: true
      C:
        motor_type: wheel_motor_r
        motor_name: wheel_motor_r
        motor_mimic_name: wheel_r
        motor_mimic_gear_ratio: -0.33333
        invert_direction: true
        # motor_mimic_gear_ratio > 0 -> mimic gear turns the same direction as the motor
        # motor_mimic_gear_ratio < 0 -> mimic gear turns in the opposite direction as the motor
    robot_dimensions: # Optional parameters. Only required if you have a two wheel differentially driven robot and want the controller and odometry to work.
      # If you have a URDF file describing the robot, the values must match for the visualization to work properly
      axle_track: 0.135 # meters
      wheel_radius: 0.022 # meters
      rad_per_s_to_effort: 5.86 # multiplier

# Define node specific/local parameters (has to match with name above)
/ultrasonic_sensor:
  ros__parameters:
    # Default values for LEGO Mindstorms NXT 2.0 ultrasonic sensor
    field_of_view: 0.5235988 # 30 degrees
    max_range: 2.54 # meters
    min_range: 0.07 # meters

/reflected_light_sensor:
  ros__parameters:
    rgb_color:
      - 0.0
      - 0.0
      - 0.0

/joint_state_aggregator:
  ros__parameters:
    related_js_time_delta: 1000000000 # nanoseconds
